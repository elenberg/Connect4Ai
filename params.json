{
  "name": "Connect 4 Learning",
  "tagline": "",
  "body": "### Abstract\r\nConnect Four is a beloved game of many youth. It is a game that has 4,531,985,219,092 possible board states [1].  The purpose of this project is to create multiple programs that can intelligently play Connect Four. The programs strategize using one of each: random choices, a Monte Carlo Search tree, a Monte Carlo Search Tree with Database look ups, and a Neural Network.\r\n\r\n### Rules\r\nConnect Four is played on a grid with a height of six and a width of seven. In this grid there are seven columns that players may place a chip into, and the chip “falls” to the lowest available space in that column. The game is won when a line can be drawn through four chips from a single player. This  can be done horizontally, diagonally, or vertically.\r\n\r\n![Connect 4 Example](http://i.imgur.com/XaVfX5e.jpg)\r\n\r\n### Objectives\r\n The purpose of this project is to create a program that can play Connect 4 at a high level of ability. This has been done before by following a set of rules known as “Zugzwang”. By following these rules, any game of Connect 4 can be won.[3]\r\nFor each of my programs, there are only two rules that are in common:\r\n\r\n1. If there is a winning move, make it.\r\n2. If the opponent can win, block it.\r\n\r\n\r\n### Methods\r\nThe methods used for creating the programs are as follows.\r\n\r\n- Random Choices\r\n- Monte Carlo Tree Search\r\n- Monte Carlo Tree Search with Lookup\r\n- Neural Network\r\n\r\nFor the random choices, it simply makes a random legal move on its turns. For the Monte Carlo Tree Search (MCTS), the program makes a large amount of random choices then uses back propagation to determine which choices had a possibility of winning. See Figure 2. The MCTS Look up is simply looking at a database of winning positions provided by UCI [4] to see if it found a winning position. \r\n\r\nThis allows it to go through a much higher amount of possible moves. The neural network is trained using the same database and should be able to detect winning board states.\r\n\r\n![Monte Carlo Tree Search](https://i.stack.imgur.com/EieiQ.png)\r\n\r\nThe Neural Network I implemented comprised of three primary layers. The first is the input layer. Which takes the board positions as states of 0, 1, 2 representing an empty space, player one, or player two respectively. \r\n\r\nThen those positions are processed by 126 Neurons in the input layer. Following that the Hidden layer takes those results and processes it using 42 neurons. \r\n\r\nThe final adjustment is made by the Output layer which produces a single “confidence” value between 0 and 1 (inclusive). Either a 0 for a losing board state or a 1 for a winning board state.\r\n\r\n![Neural Network](https://qph.ec.quoracdn.net/main-qimg-050d12c5da82f4f97fdd942d7777b8e4)\r\n\r\n### Results\r\n\r\n![](http://i.imgur.com/hAIKYu6.png)\r\n\r\n![](http://i.imgur.com/BQAAs4l.png)\r\n\r\n![](http://i.imgur.com/5BhRmnr.png)\r\n\r\n\r\n### Conclusions\r\nMy Neural Network was unexpectedly one of the weakest contenders in the group of programs, performing marginally better than a completely random player. Increasing the number of Neurons and layers would likely improve the accuracy of the Neural Network. \r\n\r\nMy Monte Carlo Tree Search with a Look up performed the best in the group. It trounces every other program, winning 97% of the games against the Neural Network and 99% of games vs the Random player, when given 1000 ms to make a guess. \r\n\r\nI was unable to test my MCTS vs MCTS look up due to time constraints. The average turn count in my test games was 12. In order to get through one set of plays (100 to 1000 vs another 100 MS) it takes over three hours. In order to retrieve the data for the heatmap it took over 46 hours.\r\nIf I had more time I would have added more layers to my NN as previously discussed and allowed more time for testing.  \r\n\r\n\r\n### References\r\n- http://www.tzi.de/~edelkamp/publications/conf/ki/EdelkampK08-1.pdf\r\n- http://www.casualarena.com/bundles/app/st/games/co4/rules/connect-4-rules.jpg?529433742cad32e\r\n- Allis, Louis Victor. A knowledge-based approach of connect-four. Vrije Universiteit, Subfaculteit Wiskunde en Informatica, 1988.\r\n- https://i.stack.imgur.com/EieiQ.png\r\n- https://qph.ec.quoracdn.net/main-qimg-050d12c5da82f4f97fdd942d7777b8e4\r\n\r\n### Acknowledgments\r\nThank you to Dr. Flann for his assistance is formulating this program. I wouldn’t have been able to get far without his assistance. \r\n\r\nThank you to the Computer Science Department at USU for helping me with ideas for this project.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}